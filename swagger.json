{
    "paths": {
        "/v1/auth/tokens": {
            "post": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AuthRequest"
                        },
                        "name": "AuthRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "operationId": "post_auth_resource",
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/AuthResponse"
                        },
                        "description": "Created"
                    }
                },
                "tags": [
                    "Tokens"
                ],
                "description": "CoreStack requires Auth token to be passed in all the API headers. Auth token has to be generated and it is valid only for an hour. New token can be generated using this API.<br><br>Extract <b>Auth-token, Tenant Id & Account Id</b> from the response. This will be required in most of the API calls</br>"
            }
        },
        "/v1/tenants": {
            "get": {
                "description": "There can be multiple tenants within a CoreStack account. List all tenants the user is mapped under a CoreStack account. If there are 3 tenants and user performing this operation has access to only 2 tenants then only those 2 tenants will be returned.",
                "operationId": "get_tenant_resource",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ListTenantResponse"
                        },
                        "description": "Success"
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/createTenantRequest"
                        },
                        "name": "createTenantRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/TenantCreateResponse"
                        },
                        "description": "Created"
                    }
                },
                "operationId": "post_tenant_resource",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Creates a new tenant under a CoreStack account. There can be multiple tenants within a CoreStack account."
            }
        },
        "/v1/tenants/{tenant_id}": {
            "delete": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id associated with the tenant",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/TenantRemovalResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "delete_tenant_resource_by_id",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Delete a tenant by its Id. Cannot undo this action, so be cautious when performing this operation. Use updateTenant to make the tenant as inactive if required."
            },
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Id of the tenant ot be retrieved.",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/GetTenantResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "get_tenant_resource_by_id",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Retreive a tenant by its Id.  If you're unsure of the tenant_id, use listTenant operation to list all tenants under a CoreStack account and fetch the needed tenant_id."
            },
            "put": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id associated with the tenant",
                        "in": "path",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/UpdateTenantRequest"
                        },
                        "name": "UpdateTenantRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Tenants"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/TenantUpdateResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "put_tenant_resource_by_id",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Update a tenant's status, description & metadata using its id. No operation can be performed when a tenant is made inactive."
            }
        },
        "/v1/{tenant_id}/cloud_accounts": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "parameters": [
                    {
                        "type": "str",
                        "default": "",
                        "name": "services",
                        "description": "Available cloud services",
                        "in": "query",
                        "enum": [
                            "AWS",
                            "Azure"
                        ]
                    }
                ],
                "tags": [
                    "CloudAccounts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CloudAccountListResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "ListCloudAccounts",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "List all cloud accounts for a given tenant."
            },
            "post": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AWSCloudAccountCreateRequest"
                        },
                        "name": "AWSCloudAccountCreateRequest",
                        "required": true,
                        "in": "body"
                    },
                    {
                        "type": "str",
                        "name": "service",
                        "enum": [
                            "AWS",
                            "Azure"
                        ],
                        "in": "query",
                        "description": "Available cloud services"
                    }
                ],
                "tags": [
                    "CloudAccounts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CloudAccountCreateResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "CreateCloudAccount",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Create a cloud account for a specific service for a given tenant.                          Service implies any Cloud platform that is integrated with CoreStack.The specified auth values                         should be passed based on the cloud service.Below                         mentioned request model is to create AWS Cloud account."
            }
        },
        "/v1/{tenant_id}/cloud_accounts/{cloud_account_id}": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                },
                {
                    "type": "string",
                    "name": "cloud_account_id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "description": "Get details of a specific cloud account within a given tenant.",
                "operationId": "DescribeCloudAccount",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "tags": [
                    "CloudAccounts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CloudAccountDescribeResponse"
                        },
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "parameters": [
                    {
                        "type": "str",
                        "name": "action",
                        "enum": [
                            "list",
                            "delete"
                        ],
                        "in": "query",
                        "description": "<u><b>Action to delete a Cloud account</b></u>: Below mentioned Response model is obtained when the <i><b>action</b></i> is <i>list</i> to get the dependencies of a Cloud account. Please find the model: <b>CloudAccountDeleteResponse</b>, when the <i><b>action</b></i> is <i>delete</i>."
                    }
                ],
                "tags": [
                    "CloudAccounts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CloudAccountDependencyResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "DeleteCloudAccount",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Delete a specific cloud account for a given tenant."
            },
            "put": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/AWSCloudAccountUpdateRequest"
                        },
                        "name": "AWSCloudAccountUpdateRequest",
                        "required": true,
                        "in": "body"
                    },
                    {
                        "type": "str",
                        "name": "service",
                        "enum": [
                            "AWS",
                            "Azure"
                        ],
                        "in": "query",
                        "description": "Available cloud services"
                    }
                ],
                "tags": [
                    "CloudAccounts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CloudAccountUpdateResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "UpdateCloudAccount",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Update cloud account with specified value for the service for a given tenant."
            }
        },
        "/v1/{tenant_id}/cloudaccounts": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "operationId": "get_auth_resource",
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceAccResponse"
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Token Id"
                ],
                "description": "Authentication Request"
            }
        },
        "/v1/{tenant_id}/inventory/count": {
            "post": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/CategoryCountRequest"
                        },
                        "name": "CategoryCountRequest",
                        "required": true,
                        "in": "body"
                    },
                    {
                        "type": "str",
                        "default": "AWS",
                        "name": "service_name",
                        "description": "",
                        "in": "query",
                        "enum": [
                            "AWS",
                            "Azure"
                        ]
                    }
                ],
                "tags": [
                    "Inventory"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CategoryCountResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "post_inventory_category_details",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Get inventory category/resource count based on the cloud"
            }
        },
        "/v1/{tenant_id}/inventory/filters": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "str",
                        "default": "AWS",
                        "name": "service_name",
                        "description": "",
                        "in": "query",
                        "enum": [
                            "AWS",
                            "Azure"
                        ]
                    }
                ],
                "tags": [
                    "Inventory"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/InventoryResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "get_inventory_resource",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Get all the available filters for the corresponding cloud."
            }
        },
        "/v1/{tenant_id}/inventory/resources": {
            "post": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/InventoryResourceDetailsRequest"
                        },
                        "name": "InventoryResourceDetailsRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Inventory"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/InventoryResourceDetails"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "post_inventory_resource",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Get resource details based on the cloud accounts, category, component, resource."
            }
        },
        "/v1/{tenant_id}/policies": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Policy"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/PolicyListResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "get_policy_resource",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "List all the Policies"
            },
            "post": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/CreatePolicyRequest"
                        },
                        "name": "CreatePolicyRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Policy"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/PolicyData"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "post_policy_resource",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Creates a new Policy."
            }
        },
        "/v1/{tenant_id}/policies/{policy_id}": {
            "delete": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "policy_id",
                        "description": "specify the policy id to delete",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Policy"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/PolicyRemovalResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "delete_policy_resource_by_id",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "delete policy with policy id and tenant id"
            },
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "policy_id",
                        "description": "specify the policy id to retrieve",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Policy"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/PolicyViewResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "get_policy_resource_by_id",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "view the created policy with policy id and tenant id"
            },
            "put": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "policy_id",
                        "description": "specify the policy id to update",
                        "in": "path",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/UpdatePolicyRequestModel"
                        },
                        "name": "UpdatePolicyRequestModel",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Policy"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/UpdatePolicyRequest"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "put_policy_resource_by_id",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "update policy with policy id and tenant id"
            }
        },
        "/v1/{tenant_id}/policies/{policy_id}/execute": {
            "post": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "policy_id",
                        "description": "specify the policy id to retrieve",
                        "in": "path",
                        "required": true
                    },
                    {
                        "schema": {
                            "$ref": "#/definitions/PolicyExecuteRequestModel"
                        },
                        "name": "PolicyExecuteRequestModel",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Policy"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/PolicyExecuteResponseModel"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "post_policy_actions_by_name",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Execute a Policy"
            }
        },
        "/v1/{tenant_id}/policy_jobs/{job_id}": {
            "get": {
                "parameters": [
                    {
                        "type": "string",
                        "name": "tenant_id",
                        "description": "Specify the tenant Id for the policy",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "job_id",
                        "description": "specify the job id to retrieve details of policy execution",
                        "in": "path",
                        "required": true
                    }
                ],
                "tags": [
                    "Policy"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/JobExecutionDetailsResponseModel"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "get_policy_jobs",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Retrieve policy job details using the job id"
            }
        },
        "/v1/{tenant_id}/scriptjobs/{script_job_id}": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                },
                {
                    "type": "string",
                    "name": "script_job_id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "description": "View script job details.",
                "operationId": "DescribeScriptJob",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "tags": [
                    "ScriptJobs"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ScriptJobDataView"
                        },
                        "description": "Success"
                    }
                }
            }
        },
        "/v1/{tenant_id}/scripts": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "parameters": [
                    {
                        "type": "str",
                        "name": "types",
                        "enum": [
                            "chef",
                            "ansible",
                            "puppet",
                            "shell"
                        ],
                        "in": "query",
                        "description": "Script types to filter"
                    }
                ],
                "tags": [
                    "Scripts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ScriptListResponse"
                        },
                        "description": "Success"
                    }
                },
                "operationId": "ListScript",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "List all the scripts."
            },
            "post": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CreateScriptRequest"
                        },
                        "name": "CreateScriptRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Scripts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/CreateScriptResponse"
                        },
                        "description": "Created"
                    }
                },
                "operationId": "CreateScript",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Creates a new script."
            }
        },
        "/v1/{tenant_id}/scripts/execute": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ExecuteScriptRequest"
                        },
                        "name": "ExecuteScriptRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Scripts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ExecuteResponse"
                        },
                        "description": "Execution Initiated"
                    }
                },
                "operationId": "ExecuteScript",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Execute a script."
            }
        },
        "/v1/{tenant_id}/scripts/scan": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ScriptScanRequest"
                        },
                        "name": "ScriptScanRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Scripts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/CreateScriptResponse"
                        },
                        "description": "Scanned"
                    }
                },
                "operationId": "ScanScript",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Scans a script to check if all dependencies(if any) are satisfied. This API will also return parameters available in script for chef and parameter & hosts available in the script for ansible"
            }
        },
        "/v1/{tenant_id}/scripts/{script_id}": {
            "parameters": [
                {
                    "type": "string",
                    "name": "tenant_id",
                    "in": "path",
                    "required": true
                },
                {
                    "type": "string",
                    "name": "script_id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "description": "View script details.",
                "operationId": "DescribeScript",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "tags": [
                    "Scripts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/ScriptDataView"
                        },
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "description": "Deletes a script.",
                "operationId": "DeleteScript",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "tags": [
                    "Scripts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CreateScriptResponse"
                        },
                        "description": "Deleted"
                    }
                }
            },
            "put": {
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/CreateScriptRequest"
                        },
                        "name": "CreateScriptRequest",
                        "required": true,
                        "in": "body"
                    }
                ],
                "tags": [
                    "Scripts"
                ],
                "responses": {
                    "400": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Bad Request"
                    },
                    "401": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Unauthorized"
                    },
                    "500": {
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "description": "Internal Server Error"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/CreateScriptResponse"
                        },
                        "description": "Updated"
                    }
                },
                "operationId": "UpdateScript",
                "security": [
                    {
                        "auth_user": []
                    },
                    {
                        "auth_token": []
                    }
                ],
                "description": "Updates a script."
            }
        }
    },
    "swagger": "2.0",
    "info": {
        "license": {
            "name": "CloudEnablers Inc License",
            "url": "http://corestack.io/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0",
        "termsOfService": "http://corestack.io/",
        "contact": {
            "url": null,
            "name": "Contact CloudEnablers",
            "email": "dev@cloudenablers.com"
        },
        "title": "Corestack External API",
        "description": "A Service API Wrapper!"
    },
    "tags": [
        {
            "name": "Tokens",
            "description": "Manage Tokens"
        },
        {
            "name": "CloudAccounts",
            "description": "Manage Cloud Accounts"
        },
        {
            "name": "Inventory",
            "description": "Manage Inventory"
        },
        {
            "name": "Policy",
            "description": "Manage Policy"
        },
        {
            "name": "ScriptJobs",
            "description": "Manage Script Jobs"
        },
        {
            "name": "Scripts",
            "description": "Manage Scripts"
        },
        {
            "name": "Token Id",
            "description": "Manage Token Id based resources"
        },
        {
            "name": "Tenants",
            "description": "Manage Tenants"
        }
    ],
    "securityDefinitions": {
        "auth_token": {
            "type": "apiKey",
            "name": "X-Auth-Token",
            "in": "header"
        },
        "auth_user": {
            "type": "apiKey",
            "name": "X-Auth-User",
            "in": "header"
        }
    },
    "definitions": {
        "": {
            "type": "object",
            "properties": {
                "service_name": {
                    "type": "string",
                    "description": "The service name of the associated service account, for example, AWS,Azure etc"
                },
                "id": {
                    "type": "string",
                    "description": "Identifier of the cloud account on which the policy will be executed"
                },
                "service_type": {
                    "type": "string",
                    "description": "Type of the service (Eg. Cloud, Monitoring, Virtualization etc.). "
                }
            },
            "required": [
                "id",
                "service_name",
                "service_type"
            ]
        },
        "ScriptScanRequest": {
            "type": "object",
            "properties": {
                "config_type": {
                    "type": "string",
                    "example": "chef",
                    "description": "Config type of the script",
                    "enum": [
                        "chef",
                        "ansible",
                        "puppet",
                        "shell"
                    ]
                },
                "file_authentication": {
                    "type": "boolean",
                    "default": false,
                    "description": "Flag to indicate authentication required for downloading the script"
                },
                "playbook_yaml": {
                    "type": "string",
                    "description": "Playbook yaml path - mandatory for ansible scripts"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/ScriptInfo"
                            }
                        ],
                        "description": "Details of the dependent scripts if any"
                    }
                },
                "script_info": {
                    "type": "array",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/ScriptInfo"
                            }
                        ],
                        "description": "script info"
                    }
                }
            },
            "required": [
                "config_type",
                "file_authentication"
            ]
        },
        "ScriptDataView": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string",
                    "description": "Name of the user who created the script."
                },
                "module_name": {
                    "type": "string",
                    "description": "Module path - available for puppet alone."
                },
                "script_name": {
                    "type": "string",
                    "description": "Script Name"
                },
                "playbook_name": {
                    "type": "string",
                    "description": "Playbook name - available for ansible alone"
                },
                "updated_at": {
                    "type": "string",
                    "description": "Script updation time"
                },
                "updated_by": {
                    "type": "string",
                    "description": "Name of the user who updated the script. "
                },
                "module_path": {
                    "type": "string",
                    "description": "Module path - available for puppet alone"
                },
                "shell_script_path": {
                    "type": "string",
                    "description": "Shell script path - available for shell alone"
                },
                "description": {
                    "type": "string",
                    "description": "Description about script"
                },
                "shell_script_name": {
                    "type": "string",
                    "description": "Shell script path - available for shell alone"
                },
                "playbook_path": {
                    "type": "string",
                    "description": "Playbook path - available for ansible alone"
                },
                "script_id": {
                    "type": "string",
                    "description": "Script Id"
                },
                "platform": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Platforms supported by script."
                },
                "operating_system": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "OS supported by script"
                },
                "cookbook_path": {
                    "type": "string",
                    "description": "Cookbook path - available for chef alone."
                },
                "uri": {
                    "type": "string",
                    "description": "Unique URI for script"
                },
                "cookbook_name": {
                    "type": "string",
                    "description": "Cookbook path - available for chef alone"
                },
                "created_at": {
                    "type": "string",
                    "description": "Script creation time"
                },
                "type": {
                    "type": "string",
                    "description": "Config type of the script"
                },
                "parameters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dict"
                        }
                    ],
                    "description": "Parameters of the script."
                },
                "category": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Script Category"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of the script"
                },
                "path_type": {
                    "type": "string",
                    "description": "Script path type such as git/url/repository(puppet_alone)/galaxy(ansible)."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the script"
                }
            },
            "required": [
                "category",
                "cookbook_name",
                "cookbook_path",
                "created_at",
                "created_by",
                "description",
                "module_name",
                "module_path",
                "operating_system",
                "parameters",
                "path_type",
                "platform",
                "playbook_name",
                "playbook_path",
                "scope",
                "script_id",
                "script_name",
                "shell_script_name",
                "shell_script_path",
                "status",
                "type",
                "updated_at",
                "updated_by",
                "uri"
            ]
        },
        "CloudAccountListResponse": {
            "type": "object",
            "properties": {
                "cloud_accounts": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/CloudAccountList"
                        }
                    ],
                    "description": "Metadata Info."
                },
                "total_count": {
                    "type": "integer",
                    "description": "Number of CloudAccounts"
                },
                "page_count": {
                    "type": "integer",
                    "description": "Number of Pages"
                }
            },
            "required": [
                "cloud_accounts",
                "page_count",
                "total_count"
            ]
        },
        "UpdatePolicyRequestModel": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the type of policy"
                },
                "severity": {
                    "type": "string",
                    "default": "",
                    "example": "low",
                    "description": "Severity of policy",
                    "enum": [
                        "low",
                        "medium",
                        "high"
                    ]
                },
                "sub_classification": {
                    "type": "string",
                    "description": "Sub classification for policy"
                },
                "content_password_or_key": {
                    "type": "string",
                    "description": "Password or private key to access of Git repo if repo is authenticated"
                },
                "metadata": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/PolicyMetadata"
                        }
                    ],
                    "description": "Metadata about policy"
                },
                "classification": {
                    "type": "string",
                    "description": "Policies are classified based on the basis of the           activity they perform, for example provisioning, Account Management, \tUtilization, etc. This value is           displayed in this field"
                },
                "is_system_policy": {
                    "type": "boolean"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Displays the service associated with the           policy, for example, AWS, AzureRM, Openstack., etc,"
                },
                "content_url": {
                    "type": "string",
                    "description": "Git project URL when the content type is git"
                },
                "content_path": {
                    "type": "string",
                    "description": "Root path of the policy in git repo"
                },
                "content_username": {
                    "type": "string",
                    "description": "Username of Git repo if repo is authenticated"
                },
                "category": {
                    "type": "string",
                    "description": "The category will be either service or resource"
                },
                "scope": {
                    "type": "string",
                    "example": "account",
                    "description": "The scope of the policy (global, accout, tenant or private)",
                    "enum": [
                        "account",
                        "tenant",
                        "private"
                    ]
                },
                "content": {
                    "type": "string",
                    "description": "The policy content"
                },
                "content_type": {
                    "type": "string",
                    "default": "",
                    "example": "git",
                    "description": "Policy content source (git, file)",
                    "enum": [
                        "git",
                        "file"
                    ]
                },
                "description": {
                    "type": "string",
                    "description": "A brief explanation of the policy."
                },
                "engine_type": {
                    "type": "string",
                    "default": "",
                    "example": "azure_policy",
                    "description": "Engine type of policy, mandatory if content type is git.",
                    "enum": [
                        "azure_policy",
                        "aws_config",
                        "congress",
                        "chef_inspec"
                    ]
                },
                "name": {
                    "type": "string",
                    "description": "policy name"
                }
            },
            "required": [
                "category",
                "classification",
                "content",
                "name",
                "scope",
                "services",
                "sub_classification"
            ]
        },
        "createTenantRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the new tenant to be created. Tenant Name must be globally unique within CoreStack. If the same tenant name is used in another account, creation wil fail. Tenant Name must start with alphabet and can contain 2-50 characters. Special characters ' \" # ? / \\ are not allowed."
                },
                "account_id": {
                    "type": "string",
                    "description": "Id of the CoreStack account under which the new tenant to be created."
                },
                "metadata": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/TenantMetadata"
                        }
                    ],
                    "description": "metadata is a freeform JSON. It allows to store custom keys and values. It will be useful for storing information about an external applications that will refer to CoreStack tenant."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the new tenant to be created."
                }
            },
            "required": [
                "account_id",
                "description",
                "metadata",
                "name"
            ]
        },
        "AuthRequest": {
            "type": "object",
            "properties": {
                "secret_key": {
                    "type": "string",
                    "description": "API Secret Key. This will be available in the email sent when the keys are generated. If you have lost the secret key, it cannot be retrieved. Request your admin to generate a new set of keys, if lost."
                },
                "access_key": {
                    "type": "string",
                    "description": "API Access Key. This can be retrieved from the <b>My Profile</b> page. Also this will be sent over email when the keys are generated."
                }
            },
            "required": [
                "access_key",
                "secret_key"
            ]
        },
        "TenantUpdateResponse": {
            "type": "object",
            "properties": {
                "tenant_id": {
                    "type": "string",
                    "description": "Id of the updated tenant. This Id will be used for performing tenant level operations such as createPolicy, createScript, onboardCloudAccount and so on."
                }
            },
            "required": [
                "tenant_id"
            ]
        },
        "TenantRemovalResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Response message."
                }
            },
            "required": [
                "message"
            ]
        },
        "CreateScriptResponse": {
            "type": "object",
            "properties": {
                "script_id": {
                    "type": "string",
                    "description": "Unique ID of the script"
                }
            }
        },
        "GetTenantResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/GetTenantModel"
                },
                {
                    "type": "object",
                    "properties": {
                        "created_by": {
                            "type": "string",
                            "description": "Name of the user created this tenant."
                        },
                        "updated_at": {
                            "type": "string",
                            "description": "DateTime when the tenant was last updated."
                        },
                        "metadata": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/TenantMetadata"
                                }
                            ],
                            "description": "metadata is a freeform JSON. It allows to store custom keys and values. It will be useful for storing information about an external applications that will refer to CoreStack tenant"
                        },
                        "updated_by": {
                            "type": "string",
                            "description": "Name of the user last updated this tenant."
                        },
                        "account_name": {
                            "type": "string",
                            "description": "Name of the CoreStack account under which this tenant resides."
                        }
                    },
                    "required": [
                        "account_name",
                        "created_by",
                        "metadata",
                        "updated_at",
                        "updated_by"
                    ]
                }
            ]
        },
        "UpdatePolicyRequest": {
            "type": "object",
            "properties": {
                "updated": {
                    "type": "string",
                    "description": "Response Message."
                }
            },
            "required": [
                "updated"
            ]
        },
        "PolicyListResponse": {
            "type": "object",
            "properties": {
                "policies": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/PolicyDataList"
                        }
                    ],
                    "description": "Policy Metadata Info."
                }
            },
            "required": [
                "policies"
            ]
        },
        "AWSCloudAccountCreateRequest": {
            "type": "object",
            "properties": {
                "scope": {
                    "type": "string",
                    "default": "global",
                    "example": "global",
                    "description": "Cloud Service",
                    "enum": [
                        "global",
                        "tenant",
                        "private",
                        "account"
                    ]
                },
                "auth_values": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/AWSCloudAccountAuthValues"
                        }
                    ],
                    "description": "Authentication credentials of Azure Cloud account."
                },
                "environment": {
                    "type": "string",
                    "default": "All",
                    "example": "All",
                    "description": "Cloud Service",
                    "enum": [
                        "All",
                        "Production",
                        "Staging",
                        "QA",
                        "Development"
                    ]
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for the Cloud account to be created"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Cloud account to be created"
                }
            },
            "required": [
                "auth_values",
                "environment",
                "name",
                "scope"
            ]
        },
        "ExecuteResponse": {
            "type": "object",
            "properties": {
                "script_job_id": {
                    "type": "string",
                    "description": "Unique ID of the Script Job"
                }
            }
        },
        "ExecuteScriptRequest": {
            "type": "object",
            "properties": {
                "config_type": {
                    "type": "string",
                    "description": "Config type of the script(s)"
                },
                "job_details": {
                    "type": "array",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/ExecuteScriptJobData"
                            }
                        ],
                        "description": "Execution input such as script/host details"
                    }
                },
                "job_name": {
                    "type": "string",
                    "description": "Name of the script job"
                }
            },
            "required": [
                "job_name"
            ]
        },
        "CategoryCountRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/CountDetailsDataModel"
                        }
                    ],
                    "description": "Filter resource details"
                },
                "identifier": {
                    "type": "string",
                    "default": "category",
                    "description": "category for the cloud"
                }
            },
            "required": [
                "identifier"
            ]
        },
        "JobExecutionDetailsResponseModel": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string",
                    "description": "Policy Job created by"
                },
                "policy_id": {
                    "type": "string",
                    "description": "Policy id of the Policy executed"
                },
                "service_accounts": {
                    "type": "string",
                    "description": "Service account used for job execution"
                },
                "job_id": {
                    "type": "string",
                    "description": "Job Id"
                },
                "status_reason": {
                    "type": "string",
                    "description": "Reason for the job status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Job"
                },
                "updated_by": {
                    "type": "string",
                    "description": "Policy Job updated by"
                },
                "engine": {
                    "type": "string",
                    "description": "Policy engine used for job execution"
                },
                "created_at": {
                    "type": "string",
                    "description": "Policy Job create time"
                },
                "tenant_name": {
                    "type": "string",
                    "description": "tenant name where job was created"
                },
                "policy_name": {
                    "type": "string",
                    "description": "Policy id of the Policy executed"
                },
                "updated_at": {
                    "type": "string",
                    "description": "Policy Job update time"
                },
                "execution_type": {
                    "type": "string",
                    "description": "Policy execution type can be on demand or scheduled"
                },
                "status": {
                    "type": "string",
                    "description": "Status of job execution"
                },
                "arguments": {
                    "type": "string",
                    "description": "arguments provided for job execution"
                }
            },
            "required": [
                "arguments",
                "created_at",
                "created_by",
                "engine",
                "execution_type",
                "job_id",
                "name",
                "policy_id",
                "policy_name",
                "service_accounts",
                "status",
                "status_reason",
                "tenant_name",
                "updated_at",
                "updated_by"
            ]
        },
        "ExecuteScriptJobData": {
            "type": "object",
            "properties": {
                "parameters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dict"
                        }
                    ],
                    "description": "Parameters of the script."
                },
                "platform": {
                    "type": "string",
                    "example": "linux",
                    "description": "OS platform of the target machine (linux/windows)",
                    "enum": [
                        "linux",
                        "windows"
                    ]
                },
                "script_name": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "script info"
                },
                "key_file": {
                    "type": "string",
                    "description": "Private key content if keypair_flag is true"
                },
                "port": {
                    "type": "string",
                    "description": "SSH/WinRM port"
                },
                "host": {
                    "type": "string",
                    "description": "Target machine's IP/DNS"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the target machine's IP/DNS"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the target machine"
                },
                "parameter_source": {
                    "type": "string",
                    "default": "script",
                    "example": "script",
                    "description": "Parameter source - whether as per the one defined in script or custom json",
                    "enum": [
                        "script",
                        "json"
                    ]
                },
                "keypair_flag": {
                    "type": "string",
                    "description": "Flag to indicate whether to connect using keypair or not"
                }
            },
            "required": [
                "host",
                "key_file",
                "keypair_flag",
                "parameters",
                "platform",
                "port",
                "script_name",
                "username"
            ]
        },
        "PolicyDataList": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Indicates whether the policy is active or inactive."
                },
                "policy_id": {
                    "type": "string",
                    "description": "Policy Id"
                },
                "severity": {
                    "type": "string",
                    "description": "Severity of policy such as low, medium and high"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of the policy"
                },
                "engine_type": {
                    "type": "string",
                    "description": "Engine type of policy where it will execute"
                },
                "uri": {
                    "type": "string",
                    "description": "Unique URI for policy"
                },
                "has_recommendations": {
                    "type": "boolean",
                    "description": "is recommendations configured on failure of policy"
                },
                "description": {
                    "type": "string",
                    "description": "A brief explanation of the policy."
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Displays the service associated with the        policy, for example, AWS, AzureRM, Openstack., etc"
                },
                "display_name": {
                    "type": "string",
                    "description": "Display name of policy"
                },
                "content_type": {
                    "type": "string",
                    "description": "Content type of policy (Git or File)"
                },
                "name": {
                    "type": "string",
                    "description": "Policy Name"
                },
                "is_parameterized": {
                    "type": "boolean",
                    "description": "is parameter required to execute policy"
                }
            },
            "required": [
                "content_type",
                "description",
                "display_name",
                "engine_type",
                "name",
                "policy_id",
                "scope",
                "services",
                "severity",
                "status",
                "uri"
            ]
        },
        "CreateScriptRequest": {
            "type": "object",
            "properties": {
                "scanned_parameters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dict"
                        }
                    ],
                    "description": "Parameter object scanned by corestack"
                },
                "platform": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "linux",
                        "enum": [
                            "linux",
                            "windows"
                        ]
                    },
                    "description": "Platforms supported by script."
                },
                "script_info": {
                    "type": "array",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/ScriptInfo"
                            }
                        ],
                        "description": "script info"
                    }
                },
                "operating_system": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "ubuntu",
                        "enum": [
                            "ubuntu",
                            "centos",
                            "fedora",
                            "redhat",
                            "windows"
                        ]
                    },
                    "description": "OS supported by script"
                },
                "name": {
                    "type": "string",
                    "description": "Script Name"
                },
                "input_source": {
                    "type": "string",
                    "default": "Script",
                    "description": "Input source of the script during execution (Script/Resource)"
                },
                "description": {
                    "type": "string",
                    "description": "Description about script"
                },
                "config_type": {
                    "type": "string",
                    "example": "ansible",
                    "description": "Config type of the script. Create is supported for ansible type scripts alone for now",
                    "enum": [
                        "ansible"
                    ]
                },
                "parameters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dict"
                        }
                    ],
                    "description": "Parameters of the script."
                },
                "category": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Application",
                        "enum": [
                            "Application",
                            "Languages",
                            "Database",
                            "Security",
                            "System",
                            "Web Server",
                            "Others"
                        ]
                    },
                    "description": "Script Category"
                },
                "scope": {
                    "type": "string",
                    "example": "private",
                    "description": "Scope of the script",
                    "enum": [
                        "private",
                        "account",
                        "tenant"
                    ]
                },
                "minimum_requirement": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ScriptMinimumRequirements"
                        }
                    ],
                    "description": "Minimum requirements to install the script"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/ScriptInfo"
                            }
                        ],
                        "description": "Details of the dependent scripts if any"
                    }
                },
                "playbook_yaml": {
                    "type": "string",
                    "description": "Playbook yaml path - mandatory for ansible scripts"
                },
                "uri": {
                    "type": "string",
                    "description": "Unique URI for script"
                },
                "is_scanned": {
                    "type": "string",
                    "default": true,
                    "description": "Whether the script needs to be scanned or not"
                }
            },
            "required": [
                "category",
                "config_type",
                "name",
                "operating_system",
                "parameters",
                "platform",
                "scope"
            ]
        },
        "CreatePolicyRequest": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the type of policy"
                },
                "severity": {
                    "type": "string",
                    "default": "",
                    "example": "low",
                    "description": "Severity of policy",
                    "enum": [
                        "low",
                        "medium",
                        "high"
                    ]
                },
                "sub_classification": {
                    "type": "string",
                    "description": "Sub classification for policy"
                },
                "content_password_or_key": {
                    "type": "string",
                    "description": "Password or private key to access of Git repo if repo is authenticated"
                },
                "name": {
                    "type": "string",
                    "description": "policy name"
                },
                "classification": {
                    "type": "string",
                    "description": "Policies are classified based on the basis of the        activity they perform, for example provisioning, Account Management, \tUtilization, etc. This value is        displayed in this field"
                },
                "description": {
                    "type": "string",
                    "description": "A brief explanation of the policy."
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Displays the service associated with the        policy, for example, AWS, AzureRM, Openstack., etc,"
                },
                "content_url": {
                    "type": "string",
                    "description": "Git project URL when the content type is git"
                },
                "content_path": {
                    "type": "string",
                    "description": "Root path of the policy in git repo"
                },
                "content_username": {
                    "type": "string",
                    "description": "Username of Git repo if repo is authenticated"
                },
                "category": {
                    "type": "string",
                    "description": "The category will be either service or resource"
                },
                "scope": {
                    "type": "string",
                    "example": "account",
                    "description": "The scope of the policy (accout, tenant or private)",
                    "enum": [
                        "account",
                        "tenant",
                        "private"
                    ]
                },
                "content": {
                    "type": "string",
                    "description": "The policy content"
                },
                "content_type": {
                    "type": "string",
                    "default": "",
                    "example": "git",
                    "description": "Policy content source (git, file)",
                    "enum": [
                        "git",
                        "file"
                    ]
                },
                "engine_type": {
                    "type": "string",
                    "default": "",
                    "example": "azure_policy",
                    "description": "Engine type of policy, mandatory if content type is git.",
                    "enum": [
                        "azure_policy",
                        "aws_config",
                        "chef_inspec",
                        "congress"
                    ]
                },
                "is_system_policy": {
                    "type": "boolean"
                }
            },
            "required": [
                "category",
                "classification",
                "content",
                "content_type",
                "description",
                "engine_type",
                "name",
                "scope",
                "services",
                "severity",
                "sub_classification"
            ]
        },
        "ScriptInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Script Name"
                },
                "path_type": {
                    "type": "string",
                    "description": "path_type"
                },
                "path": {
                    "type": "string",
                    "description": "Path of the script"
                }
            },
            "required": [
                "name",
                "path",
                "path_type"
            ]
        },
        "PolicyExecuteResponseModel": {
            "type": "object",
            "properties": {
                "job_id": {
                    "type": "string",
                    "description": "Job identifier of the executed policy"
                }
            },
            "required": [
                "job_id"
            ]
        },
        "Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Error response message."
                }
            },
            "required": [
                "message"
            ]
        },
        "ListTenantResponse": {
            "type": "object",
            "properties": {
                "tenants": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ListTenantHolder"
                        }
                    ],
                    "description": "Metadata Info."
                }
            },
            "required": [
                "tenants"
            ]
        },
        "CountDetailsDataModel": {
            "type": "object",
            "properties": {
                "service_name": {
                    "type": "string",
                    "example": "AWS",
                    "description": "Name of the cloud",
                    "enum": [
                        "AWS",
                        "Azure"
                    ]
                },
                "category": {
                    "type": "string",
                    "description": "Name for the category"
                },
                "cloud_account": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Id of the cloud account"
                }
            }
        },
        "AWSCloudAccountAuthValues": {
            "type": "object",
            "properties": {
                "secret_key": {
                    "type": "string",
                    "description": "Secret Key of AWS account."
                },
                "master_account": {
                    "type": "string",
                    "description": "Cloud account ID of the existing Master Account in the system.It is required if the account_type is chosen as 'linked_account'"
                },
                "access_key": {
                    "type": "string",
                    "description": "Access Key of AWS account."
                },
                "bucket_name": {
                    "type": "string",
                    "description": "Billing Bucket Name to process billing data.It is mandatory for the account_type 'master_account'"
                },
                "account_type": {
                    "type": "string",
                    "example": "master_account",
                    "description": "Type of the account to be created.",
                    "enum": [
                        "master_account",
                        "linked_account"
                    ]
                }
            },
            "required": [
                "access_key",
                "account_type",
                "secret_key"
            ]
        },
        "PolicyRemovalResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Response message."
                }
            },
            "required": [
                "message"
            ]
        },
        "InventoryData": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "label fields"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "filters available in inventory"
                }
            },
            "required": [
                "data",
                "type"
            ]
        },
        "ServiceAccResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Response message."
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ServiceAccData"
                        }
                    ],
                    "description": "Metadata Info."
                }
            },
            "required": [
                "data",
                "message"
            ]
        },
        "CloudAccountDependencyResponse": {
            "allOf": [
                {
                    "$ref": "#/definitions/CloudAccountDeleteResponse"
                },
                {
                    "type": "object",
                    "properties": {
                        "delete_status": {
                            "type": "string",
                            "description": "Delete Status"
                        },
                        "dependency": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/WildCardModel"
                                }
                            ],
                            "description": "Dependency Info."
                        }
                    },
                    "required": [
                        "delete_status",
                        "dependency"
                    ]
                }
            ]
        },
        "ScriptMinimumRequirements": {
            "type": "object",
            "properties": {
                "ram(MB)": {
                    "type": "number",
                    "default": 0.0,
                    "description": "Minimum RAM required(in MB) to install the script."
                },
                "disk(MB)": {
                    "type": "number",
                    "default": 0.0,
                    "description": "Minimum disk space required(in MB) to install the script."
                },
                "cpu": {
                    "type": "integer",
                    "default": 0,
                    "description": "Minimum CPU core required(in MB) to install the script."
                }
            }
        },
        "ScriptJobDataView": {
            "type": "object",
            "properties": {
                "script_job_id": {
                    "type": "string",
                    "description": "Unique ID of the Script Job"
                },
                "completed_at": {
                    "type": "string",
                    "description": "Script Job completion time in UTC"
                },
                "job_info": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ScriptJobInfo"
                        }
                    ],
                    "description": "Script execution details"
                },
                "status_reason": {
                    "type": "string",
                    "description": "Error message if failed"
                },
                "status": {
                    "type": "string",
                    "description": "Overall status of the script execution"
                },
                "execution_type": {
                    "type": "string",
                    "description": "Script Job execution type (on_demand/scheduled)"
                },
                "started_at": {
                    "type": "string",
                    "description": "Script Job start time in UTC"
                },
                "initiated_by": {
                    "type": "string",
                    "description": "User who initiated script execution"
                },
                "script_job_name": {
                    "type": "string",
                    "description": "Name of the Script Job"
                }
            },
            "required": [
                "completed_at",
                "execution_type",
                "initiated_by",
                "started_at",
                "status",
                "status_reason"
            ]
        },
        "TenantCreateResponse": {
            "type": "object",
            "properties": {
                "tenant_id": {
                    "type": "string",
                    "description": "Tenant id."
                }
            },
            "required": [
                "tenant_id"
            ]
        },
        "GetTenantModel": {
            "type": "object",
            "properties": {
                "tenant_id": {
                    "type": "string",
                    "description": "Id of the tenant. This will be used for performing tenant level operations such as createPolicy, createScript, onboardCloudAccount and so on."
                },
                "account_id": {
                    "type": "string",
                    "description": "Id of the CoreStack account."
                },
                "name": {
                    "type": "string",
                    "description": "Unique name of the tenant provided as input while creating."
                },
                "created_at": {
                    "type": "string",
                    "description": "Created DateTime of the tenant."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the tenant can be active or inactive. When inactive no operations can be performed within that tenant."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the tenant."
                }
            },
            "required": [
                "account_id",
                "created_at",
                "description",
                "name",
                "status",
                "tenant_id"
            ]
        },
        "WildCardModel": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                }
            }
        },
        "ScriptJobInfo": {
            "type": "object",
            "properties": {
                "platform": {
                    "type": "string",
                    "description": "Platform of the target machine."
                },
                "host": {
                    "type": "string",
                    "description": "Target machine's IP/DNS"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the target machine"
                },
                "script_info": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ScriptJobScriptInfo"
                        }
                    ],
                    "description": "Script execution details"
                }
            },
            "required": [
                "host",
                "platform",
                "username"
            ]
        },
        "Dict": {
            "type": "object",
            "properties": {
                "*": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                }
            }
        },
        "CategoryCountResponse": {
            "type": "object",
            "properties": {
                "category_details": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Inventory category count details"
                },
                "resource_details": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Inventory category count details"
                }
            },
            "required": [
                "category_details",
                "resource_details"
            ]
        },
        "ScriptDataList": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Config type of the script"
                },
                "script_id": {
                    "type": "string",
                    "description": "Script Id"
                },
                "platform": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Platforms supported by script."
                },
                "script_name": {
                    "type": "string",
                    "description": "Script Name"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of the script."
                },
                "operating_system": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "OS supported by script"
                },
                "uri": {
                    "type": "string",
                    "description": "Unique URI for script"
                },
                "category": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Script Category"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the script"
                },
                "description": {
                    "type": "string",
                    "description": "Description about script"
                }
            },
            "required": [
                "category",
                "description",
                "operating_system",
                "platform",
                "scope",
                "script_id",
                "script_name",
                "status",
                "type",
                "uri"
            ]
        },
        "CloudAccountDescribeResponse": {
            "type": "object",
            "properties": {
                "cloud_account_id": {
                    "type": "string",
                    "description": "CloudAccount ID."
                },
                "cloud_account_name": {
                    "type": "string",
                    "description": "CloudAccount Name."
                },
                "cloud_account_status": {
                    "type": "string",
                    "description": "CloudAccount Status."
                },
                "service": {
                    "type": "string",
                    "description": "Cloud Service."
                }
            },
            "required": [
                "cloud_account_id",
                "cloud_account_name",
                "cloud_account_status",
                "service"
            ]
        },
        "InventoryResourceDetailsRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/InventoryResourceDetailsDataModel"
                        }
                    ],
                    "description": "Filter resource details"
                }
            }
        },
        "PolicyData": {
            "type": "object",
            "properties": {
                "policy_id": {
                    "type": "string",
                    "description": "policy Id."
                }
            },
            "required": [
                "policy_id"
            ]
        },
        "CloudAccountDeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Response message."
                }
            },
            "required": [
                "message"
            ]
        },
        "CloudAccountList": {
            "type": "object",
            "properties": {
                "cloud_account_id": {
                    "type": "string",
                    "description": "CloudAccount ID."
                },
                "cloud_account_name": {
                    "type": "string",
                    "description": "CloudAccount Name."
                },
                "cloud_account_status": {
                    "type": "string",
                    "description": "CloudAccount Status."
                },
                "service": {
                    "type": "string",
                    "description": "Cloud Service."
                }
            },
            "required": [
                "cloud_account_id",
                "cloud_account_name",
                "cloud_account_status",
                "service"
            ]
        },
        "AWSCloudAccountUpdateRequest": {
            "type": "object",
            "properties": {
                "scope": {
                    "type": "string",
                    "default": "global",
                    "example": "global",
                    "description": "Cloud Service",
                    "enum": [
                        "global",
                        "tenant",
                        "private",
                        "account"
                    ]
                },
                "auth_values": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/AWSCloudAccountAuthValues"
                        }
                    ],
                    "description": "Authentication credentials of Azure Cloud account."
                },
                "environment": {
                    "type": "string",
                    "default": "All",
                    "example": "All",
                    "description": "Cloud Service",
                    "enum": [
                        "All",
                        "Production",
                        "Staging",
                        "QA",
                        "Development"
                    ]
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for the Cloud account to be created"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Cloud account to be created"
                }
            },
            "required": [
                "auth_values",
                "environment",
                "name",
                "scope"
            ]
        },
        "AuthResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/User"
                        }
                    ],
                    "description": "Token."
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TokenTenantModel"
                    },
                    "description": "List of tenants within the CoreStack account. Each tenant will have an id & name that uniquely identifies it."
                },
                "is_account_admin": {
                    "type": "boolean",
                    "description": "Implies the user associated with Access Key / Secret Key is an account admin in CoreStack. True means account admin."
                },
                "token": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Token"
                        }
                    ],
                    "description": "Token."
                },
                "account_id": {
                    "type": "string",
                    "description": "Id of the Account in CoreStack. There can be multiple tenats within an account, so account_id will be required for performing account level actions such as createTenant."
                }
            },
            "required": [
                "account_id",
                "is_account_admin",
                "tenants",
                "token",
                "user"
            ]
        },
        "UpdateTenantRequest": {
            "type": "object",
            "properties": {
                "metadata": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/TenantMetadata"
                        }
                    ],
                    "description": "metadata is freeform JSON. It allows to store custom keys and values. It will be useful for storing information about an external applications that will refer to CoreStack tenant."
                },
                "account_id": {
                    "type": "string",
                    "description": "Id of the CoreStack account under which the tenant to be updated."
                },
                "status": {
                    "type": "string",
                    "example": "active",
                    "description": "Status of the tenant can be active or inactive. When inactive no operations can be performed within that tenant.",
                    "enum": [
                        "active",
                        "inactive"
                    ]
                },
                "description": {
                    "type": "string",
                    "description": "Description of the the tenant."
                }
            },
            "required": [
                "account_id"
            ]
        },
        "ScriptListResponse": {
            "type": "object",
            "properties": {
                "scripts": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ScriptDataList"
                        }
                    ],
                    "description": "Metadata Info."
                }
            },
            "required": [
                "scripts"
            ]
        },
        "InventoryResponse": {
            "type": "object",
            "properties": {
                "filters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/InventoryData"
                        }
                    ],
                    "description": "filters available in inventory"
                }
            },
            "required": [
                "filters"
            ]
        },
        "CloudAccountUpdateResponse": {
            "type": "object",
            "properties": {
                "cloud_account_id": {
                    "type": "string",
                    "description": "Cloud account ID"
                }
            },
            "required": [
                "cloud_account_id"
            ]
        },
        "CloudAccountCreateResponse": {
            "type": "object",
            "properties": {
                "cloud_account_id": {
                    "type": "string",
                    "description": "Cloud account ID"
                }
            },
            "required": [
                "cloud_account_id"
            ]
        },
        "PolicyViewResponse": {
            "type": "object",
            "properties": {
                "content_type": {
                    "type": "string",
                    "description": "Content type of policy (Git or File)"
                },
                "policy_id": {
                    "type": "string",
                    "description": "The unique identifier created for each policy."
                },
                "git_content_url": {
                    "type": "string",
                    "description": "Git project URL when the content type is git."
                },
                "severity": {
                    "type": "string",
                    "description": "Severity of policy such as low, medium and high"
                },
                "sub_classification": {
                    "type": "string",
                    "description": "Sub classification of policy"
                },
                "scope": {
                    "type": "string",
                    "example": "global",
                    "description": "The scope of the policy.",
                    "enum": [
                        "global",
                        "account",
                        "tenant",
                        "private"
                    ]
                },
                "policy_name": {
                    "type": "string",
                    "description": "The name of the policy."
                },
                "git_content_path": {
                    "type": "string",
                    "description": "Root path of the policy in git repo."
                },
                "classification": {
                    "type": "string",
                    "description": "Policies are classified based on the basis of         the activity they perform, for example provisioning, Account Management, Utilization, etc.          This value is displayed in this field."
                },
                "description": {
                    "type": "string",
                    "description": "A brief explanation of the policy."
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Displays the service associated with the policy for example, AWS, AzureRM, Openstack., etc"
                },
                "is_system_policy": {
                    "type": "string",
                    "description": "Flag to identify system policy"
                },
                "status": {
                    "type": "string",
                    "description": "Indicates whether the policy is active or inactive."
                },
                "uri": {
                    "type": "string",
                    "description": "Unique URI for policy"
                },
                "git_content_username": {
                    "type": "string",
                    "description": "Username of Git repo if repo is authenticated"
                },
                "content": {
                    "type": "string",
                    "description": "The policy content."
                },
                "category": {
                    "type": "string",
                    "description": "The category will be either service or resource."
                },
                "engine_type": {
                    "type": "string",
                    "description": "Engine type of policy"
                }
            },
            "required": [
                "category",
                "classification",
                "content",
                "content_type",
                "description",
                "engine_type",
                "git_content_path",
                "git_content_url",
                "git_content_username",
                "is_system_policy",
                "policy_id",
                "policy_name",
                "scope",
                "services",
                "severity",
                "status",
                "sub_classification",
                "uri"
            ]
        },
        "ScriptJobScriptInfo": {
            "type": "object",
            "properties": {
                "config_type": {
                    "type": "string",
                    "description": "Config type of the script(s)"
                },
                "script_id": {
                    "type": "string",
                    "description": "Script Id"
                },
                "parameters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dict"
                        }
                    ],
                    "description": "Parameters of the script."
                },
                "script_name": {
                    "type": "string",
                    "description": "Script Name"
                },
                "output_parameters": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dict"
                        }
                    ],
                    "description": "Output parameters of the script (all applied parameters)."
                },
                "status_reason": {
                    "type": "string",
                    "description": "Error message if failed"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the script execution"
                },
                "parameter_source": {
                    "type": "string",
                    "default": "script",
                    "example": "script",
                    "description": "Parameter source - whether as per the one defined in script or custom json",
                    "enum": [
                        "script",
                        "json"
                    ]
                },
                "started_at": {
                    "type": "string",
                    "description": "Execution start time in UTC"
                }
            },
            "required": [
                "config_type",
                "output_parameters",
                "parameters",
                "script_id",
                "script_name",
                "started_at",
                "status",
                "status_reason"
            ]
        },
        "PolicyExecuteRequestModel": {
            "type": "object",
            "properties": {
                "service_accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/"
                    },
                    "description": "service account details to execute the policy"
                },
                "args": {
                    "default": {},
                    "allOf": [
                        {
                            "$ref": "#/definitions/Dict"
                        }
                    ],
                    "description": "arguments to execute policy"
                }
            },
            "required": [
                "args",
                "service_accounts"
            ]
        },
        "InventoryResourceDetails": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "string",
                    "description": "inventory count summary details"
                },
                "resource_details": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "inventory summary details"
                }
            },
            "required": [
                "count",
                "resource_details"
            ]
        },
        "PolicyMetadata": {
            "type": "object",
            "properties": {
                "file": {
                    "type": "string",
                    "description": "Metadata about policy"
                }
            }
        },
        "InventoryResourceDetailsDataModel": {
            "type": "object",
            "properties": {
                "resource": {
                    "type": "string",
                    "description": "Name for the resource"
                },
                "component": {
                    "type": "string",
                    "description": "Name for the component"
                },
                "category": {
                    "type": "string",
                    "description": "Name for the category"
                },
                "cloud_account": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Id of the cloud account"
                }
            }
        }
    },
    "consumes": [
        "application/json"
    ],
    "basePath": "/",
    "produces": [
        "application/json"
    ],
    "responses": {
        "MaskError": {
            "description": "When any error occurs on mask"
        },
        "ParseError": {
            "description": "When a mask can't be parsed"
        }
    }
}

